version: '3.8'

services:
  # PostgreSQL 資料庫服務
  db:
    image: postgres:15-alpine
    container_name: goat-nutrition-db
    environment:
      POSTGRES_DB: ${DB_NAME:-goat_nutrition}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - goat-network

  # 後端服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: goat-nutrition-backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      # 資料庫配置
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-goat_nutrition}
      
      # 應用程式配置
      SECRET_KEY: ${SECRET_KEY:-your-very-secret-key-change-in-production}
      FLASK_ENV: ${FLASK_ENV:-production}
      
      # CORS 配置 (生產環境應設定具體域名)
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - goat-network

  # 前端服務 (僅在分離部署時使用)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: goat-nutrition-frontend
    depends_on:
      - backend
    ports:
      - "3000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - goat-network
    # 如果使用統一服務模式，可以註解掉這個服務

  # Redis 快取服務 (可選，用於會話管理和快取)
  redis:
    image: redis:7-alpine
    container_name: goat-nutrition-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - goat-network
    profiles:
      - with-redis  # 使用 profile 讓這個服務成為可選的

  # Nginx 反向代理 (可選，用於統一入口)
  nginx:
    image: nginx:alpine
    container_name: goat-nutrition-nginx
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl:ro  # SSL 憑證目錄
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - goat-network
    profiles:
      - with-nginx  # 使用 profile 讓這個服務成為可選的

# 資料卷定義
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# 網路定義
networks:
  goat-network:
    driver: bridge
